// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: group_member/proto/group_member.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GroupMemberService_AddMember_FullMethodName  = "/group_member.GroupMemberService/AddMember"
	GroupMemberService_GetMembers_FullMethodName = "/group_member.GroupMemberService/GetMembers"
)

// GroupMemberServiceClient is the client API for GroupMemberService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GroupMemberServiceClient interface {
	AddMember(ctx context.Context, in *AddMemberRequest, opts ...grpc.CallOption) (*MemberResponse, error)
	GetMembers(ctx context.Context, in *GetMembersRequest, opts ...grpc.CallOption) (*GetMembersResponse, error)
}

type groupMemberServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGroupMemberServiceClient(cc grpc.ClientConnInterface) GroupMemberServiceClient {
	return &groupMemberServiceClient{cc}
}

func (c *groupMemberServiceClient) AddMember(ctx context.Context, in *AddMemberRequest, opts ...grpc.CallOption) (*MemberResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MemberResponse)
	err := c.cc.Invoke(ctx, GroupMemberService_AddMember_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupMemberServiceClient) GetMembers(ctx context.Context, in *GetMembersRequest, opts ...grpc.CallOption) (*GetMembersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMembersResponse)
	err := c.cc.Invoke(ctx, GroupMemberService_GetMembers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GroupMemberServiceServer is the server API for GroupMemberService service.
// All implementations must embed UnimplementedGroupMemberServiceServer
// for forward compatibility.
type GroupMemberServiceServer interface {
	AddMember(context.Context, *AddMemberRequest) (*MemberResponse, error)
	GetMembers(context.Context, *GetMembersRequest) (*GetMembersResponse, error)
	mustEmbedUnimplementedGroupMemberServiceServer()
}

// UnimplementedGroupMemberServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGroupMemberServiceServer struct{}

func (UnimplementedGroupMemberServiceServer) AddMember(context.Context, *AddMemberRequest) (*MemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMember not implemented")
}
func (UnimplementedGroupMemberServiceServer) GetMembers(context.Context, *GetMembersRequest) (*GetMembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMembers not implemented")
}
func (UnimplementedGroupMemberServiceServer) mustEmbedUnimplementedGroupMemberServiceServer() {}
func (UnimplementedGroupMemberServiceServer) testEmbeddedByValue()                            {}

// UnsafeGroupMemberServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GroupMemberServiceServer will
// result in compilation errors.
type UnsafeGroupMemberServiceServer interface {
	mustEmbedUnimplementedGroupMemberServiceServer()
}

func RegisterGroupMemberServiceServer(s grpc.ServiceRegistrar, srv GroupMemberServiceServer) {
	// If the following call pancis, it indicates UnimplementedGroupMemberServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GroupMemberService_ServiceDesc, srv)
}

func _GroupMemberService_AddMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupMemberServiceServer).AddMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupMemberService_AddMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupMemberServiceServer).AddMember(ctx, req.(*AddMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupMemberService_GetMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupMemberServiceServer).GetMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupMemberService_GetMembers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupMemberServiceServer).GetMembers(ctx, req.(*GetMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GroupMemberService_ServiceDesc is the grpc.ServiceDesc for GroupMemberService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GroupMemberService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "group_member.GroupMemberService",
	HandlerType: (*GroupMemberServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddMember",
			Handler:    _GroupMemberService_AddMember_Handler,
		},
		{
			MethodName: "GetMembers",
			Handler:    _GroupMemberService_GetMembers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "group_member/proto/group_member.proto",
}
